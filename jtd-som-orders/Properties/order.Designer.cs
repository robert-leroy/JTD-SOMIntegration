//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace jtd_som_orders.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    internal sealed partial class order : global::System.Configuration.ApplicationSettingsBase {
        
        private static order defaultInstance = ((order)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new order())));
        
        public static order Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT \r\n\tImportSet\r\n\t, h.INVNBR\t-- Testing\r\n\t, h.INVSEQ\t-- Testing\r\n\t, RTRIM(h.P" +
            "TRCUSID) AS CustomerID\r\n\t, h.BTCUSTNM AS CustomerName\r\n\t,\'JTD\' AS CompanyID\r\n\t, " +
            "IIF ((SELECT COUNT(*) FROM som_somshipmentdetail d WHERE d. whs <> \'OHT\'AND d.in" +
            "vnbr = h.invnbr AND d.invseq = h.invseq) > 0, \'10224\', \'10\') AS SalesLocationID\r" +
            "\n\t, REPLACE(REPLACE(REPLACE(REPLACE(UPPER(RTRIM(h.PONBR)),\'\'\'\',\'-\'),\'\"\',\'-\'),\'\\\'" +
            ",\'-\'),\'~\',\'-\') AS CustomerPONumber\r\n\t, NULL AS ContactID\r\n\t, NULL AS ContactName" +
            "\r\n\t, \'admin\' AS Taker\r\n\t, NULL AS JobName\r\n\t, CONVERT(varchar(10), h.ORDDT, 120)" +
            " AS OrderDate\r\n\t, CONVERT(varchar(10), h.INVDT, 120) AS RequestedDate\r\n\t, \'N\' AS" +
            " Quote\r\n\t, \'Y\' AS Approved\r\n\t-- If ship to in file is NULL, 1 or contains specia" +
            "l characters, default to customer\'s default ship to\r\n\t, (SELECT MIN(ship_to_id) " +
            "FROM ship_to where customer_id = h.PTRCUSID and delete_flag = \'N\') AS ShipToID\r\n" +
            "\t, RTRIM(h.STCUSTNM) AS ShipToName\r\n\t, RTRIM(h.STADDR1) AS ShipToAddress1\r\n\t, RT" +
            "RIM(h.STADDR2) AS ShipToAddress2\r\n\t, RTRIM(h.STCITY) AS ShipToCity\r\n\t, h.STSTATE" +
            " AS ShipToState\r\n\t, RTRIM(h.STZIP) AS ShipToZipCode\r\n\t, NULL AS ShipToCountry\r\n\t" +
            ", IIF ((SELECT COUNT(*) FROM som_somshipmentdetail d WHERE d. whs <> \'OHT\'AND d." +
            "invnbr = h.invnbr AND d.invseq = h.invseq) > 0, \'10224\', \'10\') AS SourceLocation" +
            "ID\r\n\t, IIF(au.som_carrier_id IS NULL\r\n\t\tOR au.som_carrier_id = \'TBD\',\r\n\t\t10085, " +
            "-- Default is Best Way\r\n\t\tau.id) AS CarrierID\r\n\t, NULL AS CarrierName\r\n\t, NULL A" +
            "S Route\r\n\t, \'Order Complete\' AS PackingBasis\r\n\t, NULL AS DeliveryInstructions\r\n\t" +
            ", tu.terms_id AS Terms\r\n\t, NULL AS TermsDesc\r\n\t, NULL AS WillCall\r\n\t, RTRIM(h.SA" +
            "LESTYPE) AS Class1\r\n\t, NULL AS Class2\r\n\t, NULL AS Class3\r\n\t, NULL AS Class4\r\n\t, " +
            "NULL AS Class5\r\n\t, IIF (h.INVTYP = \'CM\',\'Y\',\'N\') AS RMAFlag\r\n\t, \'FREIGHT\' AS Fre" +
            "ightCode\r\n\t, NULL AS ThirdPartyBillingFlagDesc\r\n\t, NULL AS CaptureUsageDefault\r\n" +
            "\t, NULL AS Allocate\r\n\t, NULL AS ContractNumber\r\n\t, NULL AS InvoiceBatchNumber\r\n\t" +
            ", NULL AS ShipToEmailAddress\r\n\t, NULL AS SetInvoiceExchangeRateSourceDesc\r\n\t, NU" +
            "LL AS ShpToPhone\r\n\t, NULL AS CurrencyID\r\n\t, NULL AS ApplyBuilderAllowanceFlag\r\n\t" +
            ", NULL AS QuoteExpirationDate\r\n\t, NULL AS PromiseDate\r\n\t, NULL AS ImportAsQuote\r" +
            "\n\t, NULL AS QuoteNumber\r\n\t, RTRIM(h.ORDERNBR) AS WebReferenceNumber\t\t-- SOM Orde" +
            "r No for reference in P21\r\n\t, IIF(UPPER(h.PONBR) = \'TISDEL DISPLAY\' OR CHARINDEX" +
            "(\'RMT\',h.SALESTYPE) > 0, \'N\', \'Y\') AS CreateInvoice\r\n\t, NULL AS StrategicPricing" +
            "LibraryID\r\n\t, NULL AS MerchandiseCredit\r\n\t, NULL AS OrderTypePriority\r\n\t, NULL A" +
            "S UPSCode\r\n\t, NULL AS SupplierOrderNo\r\n\t, NULL AS SupplierReleaseNo\r\n\t, NULL AS " +
            "PlacedByName\r\n\t, NULL AS OrderType830\r\n\t, NULL AS FreightOut\t\t\t\t-- Not in P21 te" +
            "mplate, but in import file\r\n\t, UPPER(RTRIM(h.STADDR3)) AS ShipToAddress3\t\t-- Upd" +
            "ate P21 to display this address line 3\r\n\t, NULL AS QuoteType\t\t\t\t\t-- Not in P21 t" +
            "emplate, but in import file\r\n\t, NULL AS Homeowner\t\t\t\t\t-- Not in P21 template, bu" +
            "t in import file\r\n\t, NULL AS Installer\t\t\t\t\t-- Not in P21 template, but in import" +
            " file\r\n\t, NULL AS Builder\t\t\t\t\t-- Not in P21 template, but in import file\r\n\t, NUL" +
            "L AS Architect\t\t\t\t\t-- Not in P21 template, but in import file\r\n\t, NULL AS Design" +
            "er\t\t\t\t\t-- Not in P21 template, but in import file\r\n\t, NULL AS PricingSource\t\t\t\t-" +
            "- Not in P21 template, but in import file\r\n\t, TOTITMTAX as TaxTotal\r\nFROM (SELEC" +
            "T ROW_NUMBER() OVER (ORDER BY h.INVNBR, h.INVSEQ) AS ImportSet\r\n\t, h.INVNBR\r\n\t, " +
            "h.INVSEQ\r\n\tFROM SOM_SomShipmentHeader h\r\n\tWHERE h.INVTYP = \'IV\') tmp\r\nJOIN SOM_S" +
            "omShipmentHeader as h \r\n\tON tmp.INVNBR = h.INVNBR\r\n\tAND tmp.INVSEQ = h.INVSEQ\r\nL" +
            "EFT OUTER JOIN address_ud au \r\n\t\tON au.som_carrier_id = RTRIM(h.CARRID)\r\nLEFT OU" +
            "TER JOIN terms_ud tu\r\n\t\tON tu.som_terms_id = RTRIM(h.TRMCD)\r\nLEFT OUTER JOIN p21" +
            "_view_ship_to s\r\n\t\tON s.ship_to_id = RTRIM(h.PTRCUSID)\r\nWHERE h.INVTYP = \'IV\'\r\nO" +
            "RDER BY h.invnbr, h.invseq")]
        public string SqlQueryHeaders {
            get {
                return ((string)(this["SqlQueryHeaders"]));
            }
            set {
                this["SqlQueryHeaders"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT tmp.ImportSet AS ImportSet\r\n\t, tmp.INVNBR -- Testing\r\n\t, d.INVDTLSEQ AS Li" +
            "neID\r\n\t, RTRIM(d.ITMMDL) AS ItemID\r\n\t, d.SHPQTY AS UnitQuantity\r\n\t, d.ORDUOM AS " +
            "UnitOfMeasure\r\n\t, d.SLGPRC AS UnitPrice\r\n\t, NULL AS ExtendedDescription\r\n\t, IIF(" +
            "d.WHS <> \'OHT\', \'10224\', \'10\') AS SourceLocationID\r\n\t, IIF(d.WHS <> \'OHT\', \'1022" +
            "4\', \'10\') AS ShipLocationID\r\n\t, l.product_group_id AS ProductGroupID\r\n\t, NULL AS" +
            " SupplierID\r\n\t, NULL AS SupplierName\r\n\t, NULL AS RequiredDate\r\n\t, NULL AS Expedi" +
            "teDate\r\n\t, NULL AS WillCall\r\n\t, IIF(LEN(RTRIM(d.DTLTXSFX)) > 1,\'Y\',\'N\') AS TaxIt" +
            "em\r\n\t, NULL AS OKToInterchange\r\n\t, d.ORDUOM AS PricingUnit\r\n\t, d.UNTCST AS Commi" +
            "ssionCost\r\n\t, NULL AS OtherCost\r\n\t, NULL AS POCost\r\n\t, NULL AS Disposition\r\n\t, \'" +
            "N\' AS Scheduled\r\n\t, \'Y\' AS ManualPriceOverride\r\n\t, \'N\' AS CommissionCostEdited\r\n" +
            "\t, \'N\' AS OtherCostEdited\r\n\t, NULL AS CaptureUsage\r\n\t, NULL AS TagAndHoldClassID" +
            "\r\n\t, NULL AS ContractBinID\r\n\t, NULL AS ContractNo\r\n\t, NULL AS AllocationQty\r\n\t, " +
            "NULL AS PromiseDate\r\n\t, NULL AS ResolveItemContract\r\n\t, NULL AS Sample\r\n\t, NULL " +
            "AS QuoteLineNo\r\n\t, NULL AS QuoteComplete\r\n\t, NULL AS ItemDescription\t-- Not in P" +
            "21 template, but in import file\r\nFROM (SELECT ROW_NUMBER() OVER (ORDER BY h.INVN" +
            "BR, h.INVSEQ) AS ImportSet\r\n\t, h.INVNBR\r\n\t, h.INVSEQ\r\n\tFROM SOM_SomShipmentHeade" +
            "r h\r\n\tWHERE h.INVTYP = \'IV\') tmp\r\nINNER JOIN SOM_SomShipmentDetail d\r\n\tON tmp.IN" +
            "VNBR = d.INVNBR\r\n\tAND tmp.INVSEQ = d.INVSEQ\r\nINNER JOIN inv_mast m \r\n\tON m.item_" +
            "id = d.itmmdl\r\nINNER JOIN inv_loc l\r\n\tON m.inv_mast_uid = l.inv_mast_uid and l.l" +
            "ocation_id = \'10\'\r\nWHERE ImportSet = ?\r\nUNION ALL\r\n-- Select the SO Line Special" +
            " Charges File\r\nSELECT tmp.ImportSet AS ImportSet\r\n\t, tmp.INVNBR\t-- Testing\r\n\t, h" +
            "s.ROWNBR + 9000000 AS LineID\r\n\t, CASE hs.SPCCHGID\r\n\t\tWHEN \'800\' THEN \'FREIGHT\'\r\n" +
            "\t\tWHEN \'801\' THEN \'RESTOCKING FEE\'\r\n\t\tWHEN \'803\' THEN \'FREIGHT EXCHANGES\'\r\n\t\tWHE" +
            "N \'804\' THEN \'TAXABLE FREIGHT\'\r\n                                WHEN \'805\' THEN " +
            "\'FINANCE CHARGE\'\r\n\t\tWHEN \'806\' THEN \'LABOR CHARGE\'\r\n\t\tWHEN \'807\' THEN \'TAXABLE L" +
            "ABOR/INSTALL\'\r\n\t\tELSE hs.SPCCHGID\r\n\t  END AS ItemID\r\n\t, 1 AS UnitQuantity\r\n\t, \'E" +
            "A\' AS UnitOfMeasure\r\n\t, hs.SPCCHGAMT AS UnitPrice\r\n\t, NULL AS ExtendedDescriptio" +
            "n\r\n\t, IIF(d.WHS <> \'OHT\', \'10224\', \'10\') AS SourceLocationID\r\n\t, IIF(d.WHS <> \'O" +
            "HT\', \'10224\', \'10\') AS ShipLocationID\r\n\t, NULL AS ProductGroupID\r\n\t, NULL AS Sup" +
            "plierID\r\n\t, NULL AS SupplierName\r\n\t, NULL AS RequiredDate\r\n\t, NULL AS ExpediteDa" +
            "te\r\n\t, NULL AS WillCall\r\n\t, IIF(LEN(RTRIM(hs.TAXID)) > 1,\'Y\',\'N\') AS TaxItem\r\n\t," +
            " NULL AS OKToInterchange\r\n\t, \'EA\' AS PricingUnit\r\n\t, NULL AS CommissionCost\r\n\t, " +
            "NULL AS OtherCost\r\n\t, NULL AS POCost\r\n\t, NULL AS Disposition\r\n\t, \'N\' AS Schedule" +
            "d\r\n\t, \'Y\' AS ManualPriceOverride\r\n\t, \'N\' AS CommissionCostEdited\r\n\t, \'N\' AS Othe" +
            "rCostEdited\r\n\t, NULL AS CaptureUsage\r\n\t, NULL AS TagAndHoldClassID\r\n\t, NULL AS C" +
            "ontractBinID\r\n\t, NULL AS ContractNo\r\n\t, NULL AS AllocationQty\r\n\t, NULL AS Promis" +
            "eDate\r\n\t, NULL AS ResolveItemContract\r\n\t, NULL AS Sample\r\n\t, NULL AS QuoteLineNo" +
            "\r\n\t, NULL AS QuoteComplete\r\n\t, NULL AS ItemDescription\t-- Not in P21 template, b" +
            "ut in import file\r\nFROM (SELECT ROW_NUMBER() OVER (ORDER BY h.INVNBR, h.INVSEQ) " +
            "AS ImportSet\r\n\t, h.INVNBR\r\n\t, h.INVSEQ\r\n\tFROM SOM_SomShipmentHeader h\r\n         " +
            "       WHERE h.INVTYP = \'IV\') tmp\r\nINNER JOIN SOM_SomShipmentHeaderSpecialCharge" +
            "s hs\r\n\tON tmp.INVNBR = hs.INVNBR\r\nCROSS APPLY (\r\n\tSELECT TOP 1 WHS\r\n\tFROM SOM_So" +
            "mShipmentDetail sd\r\n\tWHERE tmp.INVNBR = sd.INVNBR \r\n\t) d\r\n--Order by ImportSet\r\n" +
            "where ImportSet = ?")]
        public string SqlQueryLines {
            get {
                return ((string)(this["SqlQueryLines"]));
            }
            set {
                this["SqlQueryLines"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"SELECT *
FROM (
	SELECT tmp.ImportSet AS ImportSet
--		, d.INVNBR	-- Testing
		, d.INVDTLSEQ AS LineID
		, s.SRLNBR AS SerialNumber
	FROM (SELECT ROW_NUMBER() OVER (ORDER BY h.INVNBR, h.INVSEQ) AS ImportSet
		, h.INVNBR
		, h.INVSEQ
		FROM SOM_SomShipmentHeader h
                WHERE h.INVTYP = 'IV') tmp
	INNER JOIN SOM_SomShipmentDetail d
		ON tmp.INVNBR = d.INVNBR
		AND tmp.INVSEQ = d.INVSEQ
	JOIN SOM_SomShipmentSerial s 
		ON d.INVNBR = s.INVNBR
		AND d.INVSEQ = s.INVSEQ
		AND d.INVDTLSEQ = s.INVDTLSEQ
	UNION ALL
-- Select the SO Line Special Charges File -- Required for the Import Set Numbering
	SELECT tmp.ImportSet AS ImportSet
--		, tmp.INVNBR	--Testing
		, tmp.INVSEQ + 9000000 AS LineID
		, 'OMIT' As SerialNumber
	FROM (SELECT ROW_NUMBER() OVER (ORDER BY h.INVNBR, h.INVSEQ) AS ImportSet
		, h.INVNBR
		, h.INVSEQ
		FROM SOM_SomShipmentHeader h
                WHERE h.INVTYP = 'IV') tmp
	INNER JOIN SOM_SomShipmentHeaderSpecialCharges hs
		ON tmp.INVNBR = hs.INVNBR
		AND tmp.INVSEQ = hs.INVSEQ
	JOIN SOM_SomShipmentSerial s 
		ON tmp.INVNBR = s.INVNBR
		AND tmp.INVSEQ = s.INVSEQ
	) tmp2
WHERE tmp2.SerialNumber <> 'OMIT' and ImportSet = ? and LineID = #")]
        public string SqlQuerySerials {
            get {
                return ((string)(this["SqlQuerySerials"]));
            }
            set {
                this["SqlQuerySerials"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT *\r\nFROM (\r\n\tSELECT\r\n\t\tROW_NUMBER() OVER (ORDER BY h.INVNBR, h.INVSEQ) AS I" +
            "mportSet\r\n\t\t, \'SOM Import\' AS Topic\r\n\t\t, h.INVNBR  -- Required for GROUP BY\r\n\t\t-" +
            "- Format required builder/display/model home/parade/personal use name and addres" +
            "s as a note\r\n\t\t, IIF(h.SALESTYPE IN (\'BLD\', \'DSP\', \'MH\', \'PH\', \'PU\')\r\n\t\t\t,CONVER" +
            "T(varchar(MAX), RTRIM(h.QUTNM) + \'|\' + RTRIM(h.QUTCUST) + \'|\' \r\n\t\t\t+ RTRIM(h.QUT" +
            "ADDR1) + \'|\' + RTRIM(h.QUTCITY) \r\n\t\t\t+ \', \' + RTRIM(h.QUTSTATE) + \'  \' + RTRIM(h" +
            ".QUTZIP)) \r\n\t\t\t, NULL)\r\n\t\t\tAS Note\r\n\t\t, CONVERT(varchar(10), h.INVDT, 120) AS Ac" +
            "tivationDate\r\n\t\t, NULL AS ExpirationDate\r\n\t\t, CONVERT(varchar(10), h.INVDT, 120)" +
            " AS EntryDate\r\n\t\t, NULL AS NotepadClassID\r\n\t\t, \'Y\' AS Mandatory\r\n\tFROM SOM_SomSh" +
            "ipmentHeader h\r\n                WHERE h.INVTYP = \'IV\' \r\n\tGROUP BY h.INVNBR, h.IN" +
            "VSEQ, h.INVDT,\r\n\t\th.SALESTYPE, h.QUTNM, h.QUTCUST, h.QUTADDR1, h.QUTCITY, h.QUTS" +
            "TATE, h.QUTZIP\r\n\tUNION ALL\r\n\tSELECT\r\n\t\tROW_NUMBER() OVER (ORDER BY h.INVNBR, h.I" +
            "NVSEQ) AS ImportSet\r\n\t\t, \'SOM Import\' AS Topic\r\n\t\t, h.INVNBR  -- Required for GR" +
            "OUP BY\r\n\t\t-- Format multiple comment lines into one note\r\n\t\t, STUFF( (SELECT \' \'" +
            "+UPPER(RTRIM(h2.CMTTXT))\r\n\t\t\t\tFROM SOM_SomShipmentHeaderComments h2\r\n\t\t\t\tWHERE h" +
            "2.INVNBR = hc.INVNBR\r\n\t\t\t\tORDER BY h2.CMTSEQ\r\n\t\t\t\tFOR XML PATH(\'\'), TYPE).value(" +
            "\'.\', \'varchar(max)\')\r\n\t\t\t\t,1,1,\'\')\r\n\t\t\t\tAS Note\r\n\t\t, CONVERT(varchar(10), h.INVD" +
            "T, 120) AS ActivationDate\r\n\t\t, NULL AS ExpirationDate\r\n\t\t, CONVERT(varchar(10), " +
            "h.INVDT, 120) AS EntryDate\r\n\t\t, NULL AS NotepadClassID\r\n\t\t, \'Y\' AS Mandatory\r\n\tF" +
            "ROM SOM_SomShipmentHeader h\r\n\t\tLEFT JOIN SOM_SomShipmentHeaderComments hc\r\n\t\t\tON" +
            " hc.INVNBR = h.INVNBR\r\n\t\t\tAND hc.INVSEQ = h.INVSEQ\r\n                WHERE h.INVT" +
            "YP = \'IV\' \r\n                GROUP BY h.INVNBR, h.INVSEQ, hc.INVNBR, hc.INVSEQ, h" +
            "c.INVDTLSEQ, h.INVDT,\r\n\t\th.SALESTYPE, h.QUTNM, h.QUTCUST, h.QUTADDR1, h.QUTCITY," +
            " h.QUTSTATE, h.QUTZIP\r\n\t) tmp2\r\nWHERE tmp2.Note IS NOT NULL and ImportSet = ?")]
        public string SqlQueryHeaderNotes {
            get {
                return ((string)(this["SqlQueryHeaderNotes"]));
            }
            set {
                this["SqlQueryHeaderNotes"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"-- Select the SO Line Note File
SELECT * 
FROM ( SELECT 
	 tmp.ImportSet AS ImportSet
	, d1.INVDTLSEQ AS LineID
	, 'SOM Import' AS Topic
	, d1.INVNBR
	, STUFF( (SELECT' '+RTRIM(d2.CMTTXT)
			FROM SOM_SomShipmentComments d2
			WHERE d2.INVNBR = d1.INVNBR
			ORDER BY d2.CMTSEQ
			FOR XML PATH(''), TYPE).value('.', 'varchar(max)')
			,1,1,'')
	  AS Note
	, CONVERT(varchar(10), h.INVDT, 120) AS ActivationDate
	, NULL AS ExpirationDate
	, CONVERT(varchar(10), h.INVDT, 120) AS EntryDate
	, NULL AS NotepadClassID
	, 'N' AS Mandatory
FROM (SELECT ROW_NUMBER() OVER (ORDER BY h.INVNBR, h.INVSEQ) AS ImportSet
		, h.INVNBR
		, h.INVSEQ
		FROM SOM_SomShipmentHeader h
                WHERE h.INVTYP = 'IV') tmp
	JOIN SOM_SomShipmentComments d1 ON d1.INVNBR = tmp.INVNBR AND d1.INVSEQ = tmp.INVSEQ
	LEFT JOIN SOM_SomShipmentDetail d
		ON d.INVNBR = d1.INVNBR AND d.INVDTLSEQ = d1.INVDTLSEQ
	INNER JOIN SOM_SomShipmentHeader h
		ON h.INVNBR = d1.INVNBR
WHERE h.INVTYP = 'IV' ) tmp2
WHERE ImportSet = ? and LineID = #
GROUP By ImportSet, LineID, Topic, INVNBR, Note,ActivationDate,ExpirationDate, EntryDate, NotepadClassID, Mandatory
")]
        public string SqlQueryLineNotes {
            get {
                return ((string)(this["SqlQueryLineNotes"]));
            }
            set {
                this["SqlQueryLineNotes"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"SELECT * FROM 
(SELECT ROW_NUMBER() OVER (ORDER BY h.INVNBR, h.INVSEQ) AS ImportSet
	, IIF(cu.som_salesrep_id IS NULL
		OR cu.som_salesrep_id = 'TBD',
		RTRIM(h.SLSREPNBR),
		cu.id) AS SalesrepID
	, NULL AS SalesrepFirstName
	, NULL AS SalesrepMI
	, NULL AS SalesrepLastName
	, 'Y' AS PrimarySalesrep
	, 100 AS CommissionSplit
	, 'Y' AS FullCommission
FROM SOM_SomShipmentHeader h
	LEFT OUTER JOIN contacts_ud cu (NOLOCK)
		ON cu.som_salesrep_id = RTRIM(h.SLSREPNBR)
WHERE h.INVTYP = 'IV') a
WHERE a.ImportSet = ?")]
        public string SqlQuerySalesReps {
            get {
                return ((string)(this["SqlQuerySalesReps"]));
            }
            set {
                this["SqlQuerySalesReps"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("http://jtdsql02.jtdinc.local:3080/api")]
        public string rootUri {
            get {
                return ((string)(this["rootUri"]));
            }
            set {
                this["rootUri"] = value;
            }
        }
    }
}
